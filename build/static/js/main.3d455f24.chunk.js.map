{"version":3,"sources":["reportWebVitals.js","WeatherApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","WeatherApp","city","setCity","useState","weatherData","setWeatherData","loading","setLoading","error","setError","React","createElement","className","type","placeholder","value","onChange","e","target","onClick","async","response","fetch","concat","ok","Error","data","json","console","disabled","map","day","key","date","highTemperature","lowTemperature","conditions","condition","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"kNAYeA,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,M,MCgECS,MApEf,WACE,MAAOC,EAAMC,GAAWC,mBAAS,KAC1BC,EAAaC,GAAkBF,mBAAS,OACxCG,EAASC,GAAcJ,oBAAS,IAChCK,EAAOC,GAAYN,mBAAS,MAyBnC,OACEO,IAAAC,cAAA,OAAKC,UAAU,yBACbF,IAAAC,cAAA,SACEE,KAAK,OACLC,YAAY,aACZC,MAAOd,EACPe,SAAWC,GAAMf,EAAQe,EAAEC,OAAOH,OAClCH,UAAU,eAEZF,IAAAC,cAAA,UAAQQ,QAhCaC,UACvB,IACEb,GAAW,GACXE,EAAS,MAGT,MAAMY,QAAiBC,MAAM,iCAADC,OAAkCtB,IAE9D,IAAKoB,EAASG,GACZ,MAAM,IAAIC,MAAM,gCAGlB,MAAMC,QAAaL,EAASM,OAC5BtB,EAAeqB,GACf,MAAOlB,GACPoB,QAAQpB,MAAM,+BAAgCA,GAC9CC,EAAS,mDACTJ,EAAe,MAChB,QACCE,GAAW,KAawBsB,SAAUvB,EAASM,UAAU,iBAC7DN,EAAU,cAAgB,eAG5BA,GAAWI,IAAAC,cAAA,OAAKC,UAAU,oBAE1BJ,GAASE,IAAAC,cAAA,KAAGC,UAAU,iBAAiBJ,GAEvCJ,GACCM,IAAAC,cAAA,OAAKC,UAAU,oBAEbF,IAAAC,cAAA,UAAI,oBACJD,IAAAC,cAAA,UACGP,EAAY0B,IAAKC,GAChBrB,IAAAC,cAAA,MAAIqB,IAAKD,EAAIE,MACXvB,IAAAC,cAAA,cAASoB,EAAIE,MAAc,YAAUF,EAAIG,gBAAgB,UAAQH,EAAII,eACrEzB,IAAAC,cAAA,UACGoB,EAAIK,WAAWN,IAAKO,GACnB3B,IAAAC,cAAA,MAAIqB,IAAKK,GAAYA,WCrD5BC,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHhC,IAAAC,cAACD,IAAMiC,WAAU,KACfjC,IAAAC,cAACX,EAAU,QAOfV,K","file":"static/js/main.3d455f24.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react';\r\nimport './WeatherApp.css'; // Import the separate CSS file for styling\r\n\r\nfunction WeatherApp() {\r\n  const [city, setCity] = useState('');\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchWeatherData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Make API request to your backend microservice using port 8080\r\n      const response = await fetch(`http://localhost:8080/weather/${city}`);\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch weather data');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setWeatherData(data);\r\n    } catch (error) {\r\n      console.error('Error fetching weather data:', error);\r\n      setError('Failed to fetch weather data. Please try again.');\r\n      setWeatherData(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"weather-app-container\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter city\"\r\n        value={city}\r\n        onChange={(e) => setCity(e.target.value)}\r\n        className=\"input-text\"\r\n      />\r\n      <button onClick={fetchWeatherData} disabled={loading} className=\"submit-button\">\r\n        {loading ? 'Fetching...' : 'Get Weather'}\r\n      </button>\r\n\r\n      {loading && <div className=\"loading-spinner\"></div>}\r\n\r\n      {error && <p className=\"error-message\">{error}</p>}\r\n\r\n      {weatherData && (\r\n        <div className=\"weather-forecast\">\r\n          {/* Display weather data */}\r\n          <h2>Weather Forecast</h2>\r\n          <ul>\r\n            {weatherData.map((day) => (\r\n              <li key={day.date}>\r\n                <strong>{day.date}</strong> - High: {day.highTemperature}, Low: {day.lowTemperature}\r\n                <ul>\r\n                  {day.conditions.map((condition) => (\r\n                    <li key={condition}>{condition}</li>\r\n                  ))}\r\n                </ul>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport WeatherApp from './WeatherApp';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <WeatherApp />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}